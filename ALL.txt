Pengenalan Object Oriented Programming

Apa itu Object Oriented Programming?
Object Oriented Programming adalah sudut pandang bahasa pemrograman yang berkonsep “objek”
Ada banyak sudut pandang bahasa pemrograman, namun OOP adalah yang sangat populer saat ini.
Ada beberapa istilah yang perlu dimengerti dalam OOP, yaitu: Object dan Class

Apa itu Object?
Object adalah data yang berisi field / properties / attributes dan method / function / behavior

Apa itu Class?
Class adalah blueprint, prototype atau cetakan untuk membuat Object
Class berisikan deklarasi semua properties dan functions yang dimiliki oleh Object
Setiap Object selalu dibuat dari Class
Dan sebuah Class bisa membuat Object tanpa batas

Class dan Object : Person
http://www.plantuml.com/plantuml/uml/TP7DQeGm4CVlynI3f_RW2nHQn59QUf12ds3KgH_632Jn86NVVMVPoBgH5Hp8x_-Ha1G-a0lBR00QGzxZ3pil5ly1zViDRh0T_WtEXufctaD3H-Pf_M9Zv2ckhUhFYU5Jf2rNlhUS0AGUkGd8au3--7BR5Lyn-vWaYznGWhVeA9hLSGX_YzfKESIhfNFIxohgfHtWCjAAKbcsAMa5zQGLyURo_0sl1trtJ87tV9G7GYoE0XHiMtsJCm00

Class dan Object : Car
http://www.plantuml.com/plantuml/uml/NP312i8m44Jl-Oeb9ptq1mIbKWGldXGyRzjG8ib6qbImuh_RR4jIp27BliaCGye-e0-3DQ8nsFTGeOUFWEbSWzVK0Q5LwxtsI2q3TfweqwGssuMuPm9V8LpzK4q0V26DAEO1Euw4FSWZ0va5pexApRrTG9aJZCLHyBtsnrqcdDptmKnDizkwMXljn39N2PUPo2pbbBEZDbQ8Fr8K1yXFAgymg2Ia-l-SUoLSAce7Qtu0

OOP di JavaScript
JavaScript sendiri sebenarnya sejak awal dibuat sebagai bahasa prosedural, bukan bahasa pemrograman berorientasi objek
Oleh karena, implementasi OOP di JavaScript memang tidak sedetail bahasa pemrograman lain yang memang dari awal merupakan bahasa pemrograman OOP seperti Java atau C++

Membuat Constructor Function

Membuat Object
Sebenarnya kita sudah belajar tipe data object, dengan cara membuat variable dengan tipe data object
Namun pembuatan object menggunakan tipe data object, akan membuat object yang selalu unik, sedangkan dalam OOP, biasanya kita akan membuat class sebagai cetakan, sehingga bisa membuat object dengan karakteristik yang sama berkali, kali, tanpa harus mendeklarasikan object berkali-kali seperti menggunakan tipe data object

Kode : All Object
<script>

    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

    const eko = new Person("Eko", "Khannedy");
    eko.sayHello("Joko");

    const budi = new Person("Budi", "Nugraha");
    budi.sayHello("Joko");

    console.log(eko);
    console.log(budi);

</script>

Membuat Constructor Function
Sebelum EcmaScript versi 6, pembuatan class, biasanya menggunakan function. Hal ini dikarenakan sebenarnya JavaScript bukanlah bahasa pemrograman yang fokus ke OOP
Untuk membuat class di JavaScript lama, kita bisa membuat function
Function ini kita sebut dengan Constructor Function

Kode : Constructor Function
    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

Membuat Object dari Constructor Function
Setelah kita membuat class, jika kita ingin membuat object dari class tersebut, kita bisa menggunakan kata kunci new, lalu diikuti dengan nama constructor function nya 

Kode : Membuat Object 
    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

    const eko = new Person("Eko", "Khannedy");
    eko.sayHello("Joko");

    const budi = new Person("Budi", "Nugraha");
    budi.sayHello("Joko");

Property di Constructor Function
Sebenarnya setelah kita membuat object, kita bisa dengan mudah menambahkan property ke dalam object tersebut hanya dengan menggunakan nama variable nya, diikuti tanda titik dan nama property
Namun jika seperti itu, alhasil, constructor function yang sudah kita buat tidak terlalu berguna, karena property nya hanya ada di object yang kita tambahkan property
Untuk menambahkan property di dalam semua object yang dibuat dari constructor function, kita bisa menggunakan kata kunci this lalu diikuti dengan nama property nya

Kode : Property di Constructor Function
    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

    const eko = new Person("Eko", "Khannedy");
    eko.sayHello("Joko");

    const budi = new Person("Budi", "Nugraha");
    budi.sayHello("Joko");

Method di Constructor Function
Sama seperti pada tipe data object biasanya, kita juga bisa menambahkan method di dalam constructor function
Jika kita tambahkan method di constructor function, secara otomatis object yang dibuat akan memiliki method tersebut

Kode : Method di Constructor Function
    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

Parameter di Constructor Function
Karena dalam JavaScript, class adalah berbentuk function, jadi secara default, function tersebut bisa memiliki parameter
Constructor function sama seperti function biasanya, bisa memiliki parameter, hal ini membuat ketika kita membuat object, kita bisa mengirim langsung data lewat parameter di constructor function tersebut

Kode : Parameter di Constructor Function
    function Person(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, my name is ${this.firstName}`);
        }
    }

Constructor Inheritance
Dalam constructor kita biasanya membuat property baik itu berisi value ataupun function
Di dalam constructor, kita bisa memanggil constructor lain, dengan begitu kita bisa mewarisi semua property yang dibuat di constructor lain tersebut
Untuk memanggil constructor lain, kita bisa menggunakan NamaConstructor.call(this, parameter)

Kode : Constructor Inheritance
<script>

    function Employee(firstName){
        this.firstName = firstName;
        this.sayHello = function (name) {
            console.info(`Hello ${name}, My name is ${this.firstName}`);
        }
    }

    function Manager(firstName, lastName){
        this.lastName = lastName;
        Employee.call(this, firstName);
    }

    const eko = new Manager("Eko", "Khanedy");
    console.info(eko);

</script>

Prototype
JavaScript sebelumnya dikenal dengan pemrograman berbasis prototype
Memang agak sedikit membingungkan, dan tidak dipungkiri, banyak sekali yang bingung dengan konsep prototype di JavaScript
Pada chapter ini, kita akan bahas tentang konsep prototype

Prototype Inheritance
Saat kita membuat object dari constructor function, object tersebut disebut instance, semua property (baik itu value atau method), akan berada di dalam instance object nya
Setiap kita membuat sebuah constructor function, maka secara otomatis akan dibuatkan prototype nya, misal ketika kita membuat constructor function Person, maka akan ada Person.prototype
Saat kita membuat sebuah object instance, secara otomatis object tersebut adalah turunan dari Constructor.prototype nya
Untuk mengakses prototype milih sebuah instance, kita bisa menggunakan __proto__

Kode : Object Instance
    const eko = new Person("Eko", "Khannedy");

    const budi = new Person("Budi", "Nugraha");

    console.log(eko);
    console.log(budi);

Console : Object Instance

Diagram
Prototype

Console : Object Instance Inheritance

Menambah Property ke Prototype
Property mirip object, dimana kita bisa menambah property baik itu value ataupun method
Saat kita menambah sebuah property ke Prototype, secara otomatis, semua object instance yang turunan dari prototype tersebut akan memiliki property tersebut

Kode : Menambah Property ke Instance Object
Person.prototype.sayBye = function (){
        console.info("Good Bye");
    }

    Person.prototype.run = function (){
        console.info(`${this.firstName} is running`);
    }

    const eko = new Person("Eko", "Khannedy");

    const budi = new Person("Budi", "Nugraha");

    console.log(eko);
    console.log(budi);

    eko.sayBye();
    eko.run();

Kode : Menambahkan Property ke Prototype
Person.prototype.sayBye = function (){
        console.info("Good Bye");
    }

    Person.prototype.run = function (){
        console.info(`${this.firstName} is running`);
    }

Cara Kerja Prototype Inheritance
Bagaimana bisa property di prototype diakses dari object instance?
Ketika kita mengakses property di object instance, pertama akan di cek apakah di object tersebut terdapat property tersebut atau tidak, jika tidak, maka akan di cek di __proto__ (prototype) nya, jika masih tidak ada, akan di cek lagi di __proto__ (prototype) yang lebih tinggi, begitu seterusnya, sampai berakhir di Object Prototype

Prototype Inheritance
Sekarang kita sudah tahu, bahwa prototype selalu memiliki parent, artinya dia adalah turunan, parent tertinggi adalah Object prototype
Pertanyaannya bagaimana jika kita ingin melakukan inheritance ke Prototype lain?
Hal ini juga bisa dilakukan, namun agak sedikit tricky, karena hal ini, sebenarnya untuk JavaScript modern, tidak direkomendasikan lagi praktek OOP menggunakan Prototype, karena di ES6 sudah dikenalkan kata kunci class yang akan nanti dibahas di chapter tersendiri

Kode :
<script>

    function Employee(name) {
        this.name = name;
    }

    function Manager(name) {
        this.name = name;
    }

    // Manager.prototype = Employee.prototype; // salah
    Manager.prototype = Object.create(Employee.prototype);

    Manager.prototype.sayHello = function (name) {
        console.info(`Hello ${name}, my name is Manager ${this.name}`);
    }

    Employee.prototype.sayHello = function (name) {
        console.info(`Hello ${name}, my name is Employee ${this.name}`);
    }

    const employee = new Employee("Budi");
    employee.sayHello("Joko");

    const manager = new Manager("Eko");
    manager.sayHello("Joko");

    console.info(employee);
    console.info(manager);

</script>

Kode : Prototype Inheritance Salah (1)
    // Manager.prototype = Employee.prototype; // salah

Kode : Prototype Inheritance Benar (1)
    function Employee(name) {
        this.name = name;
    }

    function Manager(name) {
        this.name = name;
    }

    Manager.prototype = Object.create(Employee.prototype);

    Manager.prototype.sayHello = function (name) {
        console.info(`Hello ${name}, my name is Manager ${this.name}`);
    }

    Employee.prototype.sayHello = function (name) {
        console.info(`Hello ${name}, my name is Employee ${this.name}`);
    }

    const employee = new Employee("Budi");
    employee.sayHello("Joko");

    const manager = new Manager("Eko");
    manager.sayHello("Joko");

    console.info(employee);
    console.info(manager);

Diagram : Prototype Inheritance Benar

Kata Kunci Class

Membuat Class
Sejak EcmaScript versi 6, diperkenalkan kata kunci baru, yaitu class, ini merupakan kata kunci yang digunakan untuk membuat class di JavaScript
Dengan kata kunci class, kita tidak perlu lagi menggunakan constructor function untuk membuat class

Kode : Membuat Class
    class Person {

    }

    const eko = new Person();
    console.info(eko);

Constructor di Class
Karena bentuk constructor function mirip dengan function, jadi kita bisa menambah parameter pada constructor function, lantas bagaimana dengan class?
Di class juga kita bisa menambah constructor, dimana dengan menggunakan constructor, kita juga bisa menambah parameter saat pertama kali membuat object nya
Untuk membuat constructor di class, kita bisa menggunakan kata kunci constructor

Kode : Constructor di Class
    class Person {

        constructor(name) {
            // kode apapun
            console.info(`Membuat Person ${name}`);
        }

    }

    const eko = new Person("Eko");
    console.info(eko);

    const budi = new Person("Budi");

Property di Class
Sama seperti pada constructor function, dalam class pun kita bisa menambahkan property
Karena hasil akhirnya adalah sebuah object, jadi menambahkan property di class bisa juga dilakukan di instance object nya

Kode : Property di Class
